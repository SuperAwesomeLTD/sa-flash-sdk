{
    "name": "Adobe Flash SDK",
    "text": "<p>The SuperAwesome AdobeAIR SDK (Software Development Kit) lets you to easily add COPPA-compliant pre-roll and display advertisements to your apps.</p>\n<p>This full project source is hosted on GitHub: <a href=\"https://github.com/SuperAwesomeLTD/sa-flash-sdk\">https://github.com/SuperAwesomeLTD/sa-flash-sdk</a></p>\n",
    "sections": [
        {
            "name": "Getting Started",
            "sections": [
                {
                    "name": "Registering Your App on the Dashboard",
                    "text": "<p>If you haven&#39;t registered your app on the SuperAwesome Dashboard yet, you can do that by going to <a href=\"http://dashboard.superawesome.tv\">http://dashboard.superawesome.tv</a> and creating a new app.</p>\n<p><img src=\"img/dashboard.png\" alt=\"\" title=\"Registering an app on the dashboard\"></p>\n<p>Once your app is registered, you can create placements for it and use the documentation provided below to integrate these placements into your Flash application.</p>\n"
                },
                {
                    "name": "Integrating the SDK",
                    "text": "<h3 id=\"download-the-necessary-files\">Download the necessary files</h3>\n<p>The Flash SDK is compiled into a .swc file that you can download from here <a href=\"https://github.com/SuperAwesomeLTD/sa-flash-sdk/raw/master/bin/SuperAwesome.swc\">SuperAwesome.swc</a>.\nThis will allow you to add Banner and Interstitial Ads to your project.</p>\n<p>To be able to add Video Ads, you have to also download <a href=\"https://github.com/SuperAwesomeLTD/sa-flash-sdk/raw/master/bin/VideoPlayer.swf\">VideoPlayer.swf</a>.</p>\n<p>Once you&#39;ve downloaded these two files, you need to add them to your project.</p>\n<h3 id=\"setup-the-adobe-flash-cc-environment\">Setup the Adobe Flash CC Environment</h3>\n<p>Create a new Action Script 3.0 project in Adobe Flash CC (or use your existing one). This can be situated anywhere on your hard drive, such as:</p>\n<ul>\n<li>C:/Workspace/MyFlashProject/</li>\n<li>/Users/myuser/Workspace/MyFlashProject/</li>\n</ul>\n<p>We&#39;ll refer to this location from now on simply as <code>/project_root</code>. There should be two important files in this folder:</p>\n<ul>\n<li><code>MyFlashProject.fla</code> - a file created by the Flash CC Environment</li>\n<li><code>Main.as</code> - or a similary named file, that acts as the main class of the Flash application.</li>\n</ul>\n<p><img src=\"img/flash_main.png\" alt=\"\" title=\"The link between .fla file and .as main class\"></p>\n<h3 id=\"adding-the-sdk\">Adding the SDK</h3>\n<p>To add the SDK to the project, simply copy the two files you just downloaded, <code>SuperAwesome.swc</code> and <code>VideoPlayer.swf</code>, into <code>/project_root</code>. \nThen you&#39;ll need to setup library paths, as follows:</p>\n<p>Go to the File -&gt; Publish Settings menu. A pop-up will appear with different settings. Press on the <code>Action Script 3 Settings</code> button.</p>\n<p><img src=\"img/flash_settings_1.png\" alt=\"\" title=\"Press on the Action Script 3 Settings button\"></p>\n<p>There, in the <code>Library path</code> tab, add the relative or absolute path to where you have saved the <code>SuperAwesome.swc</code> file (in this case, the <code>/project_root</code> folder). In this way, your whole project will have access to the SDK.</p>\n<p><img src=\"img/flash_settings_2.png\" alt=\"\" title=\"Setup the path to the library\"></p>\n<p>Press OK and then make sure that in the <code>Publish Settings</code> menu the <code>Local playback security</code> option is set to <code>Access network only</code>.</p>\n<p><img src=\"img/flash_settings_3.png\" alt=\"\" title=\"Set Local playback security to Access network only\"></p>\n"
                }
            ]
        },
        {
            "name": "Initial Setup",
            "text": "<p>To begin using the SDK, you need to change some parts of your <code>Main.as</code> file, in order to import the tv.superawesome. package and setup some global variables:</p>\n<pre><code>package  {\n    // imports MovieClip (standard Flash package)\n    import flash.display.MovieClip;\n\n    // import all classes from the SuperAwesome package\n    import tv.superawesome.*;\n\n    // main class - always extends from MovieClip\n    public class Main extends MovieClip {\n\n\n        public function Main() {\n            // Configures SuperAwesome SDK to production mode\n            SuperAwesome.getInstance().setConfigProduction();\n\n            // enables or disabled test mode\n            SuperAwesome.getInstance().enableTestMode();\n        }\n    }\n\n}\n</code></pre><p>The SuperAwesome SDK can be setup in three ways: Production, Staging and Development, by using:</p>\n<pre><code>SuperAwesome.getInstance().setConfigProduction();\nSuperAwesome.getInstance().setConfigStaging();\nSuperAwesome.getInstance().setConfigDevelopment();\n</code></pre><p>And you can also enable or disable test mode globally, by using:</p>\n<pre><code>SuperAwesome.getInstance().enableTestMode();\nSuperAwesome.getInstance().disableTestMode();\n</code></pre>"
        },
        {
            "name": "Banner Ads",
            "text": "<p>Once that is done, you can create a test banner by adding the following lines to the <code>Main()</code> function: </p>\n<pre><code>var vp:Rectangle = new Rectangle(0,0,320,50);\nvar ad:BannerAd = new BannerAd(vp, 5687);\naddChild(ad);\n</code></pre><p>You first create a rectangle that should be the size of the Ad you specified in the dashboard. Then create a new <code>BannerAd</code> object, using the rectangle and a PlacementId. \nSince we enabled test mode in the previous section, it is alright to use <code>5687</code> as a PlacementId, but you should use the one obtained in the Dashboard for real ads.</p>\n"
        },
        {
            "name": "Interstitial Ads",
            "text": "<p>Creating interstitial ads is similar.</p>\n<p>Just add the following lines of code to your <code>Main()</code> function:</p>\n<pre><code>var iad:InterstitialAd = new InterstitialAd(5692);\naddChild(iad);\niad.play();\n</code></pre><p>Notice that an interstitial ad does not need specifying a rectanlge, since it automatically covers the whole screen, as a popup. Again, since test mode is enabled, we can use the <code>5692</code> test placement, but it&#39;s advised to use the one received got from the Dashboard.</p>\n<p>Also notice the interstitial ad has a special <code>play()</code> function. Only when this function is called does the ad actually display. </p>\n"
        },
        {
            "name": "Video Ads",
            "text": "<p>Finally, to add a Video ad, two things are required:</p>\n<p>First, change the <code>Main()</code> function in <code>Main.as</code> to contain the following code:</p>\n<pre><code>var vp2:Rectangle = new Rectangle(0,60,400,300);\nvar vad:VideoAd = new VideoAd(vp2, 5740);\naddChild(vad);\nvad.play();\n</code></pre><p>What this does is define a new Rectangle and then create a new <code>VideoAd</code> object using the rectangle and a test <code>5740</code> PlacementId.</p>\n<p>The video ad will only play once the <code>play()</code> function is called. </p>\n<p>One more thing, in order for video ads to properly work, the <code>VideoPlayer.swf</code> file you downloaded earlier must be present in <code>/project_root</code>. If this file is missing, video ads will not work.</p>\n"
        },
        {
            "name": "Event Handlers",
            "text": "<p>Each type of ad (banner, interstitial or video) sends some default messages that you can intercept:</p>\n<ul>\n<li>ad was loaded</li>\n<li>ad has failed loading</li>\n<li>ad was closed</li>\n<li>ad was empty</li>\n</ul>\n<p>To intercept them, each Ad class offers three identical functions that allow you to define your own behaviour for what happens when an ad fails, succesfully loads, is closed or is empty (server returned empty JSON).</p>\n<p><code>onAdLoad</code> is triggered when an ad has finally loaded. It takes another function as a parameter, which can be specified inline or in another part of the file. </p>\n<pre><code>ad.onAdLoad(function(){\n    trace(&quot;ad loaded&quot;);\n});\n</code></pre><p><code>onAdFail</code> is triggered when an ad has failed loading. It takes another function as a parameter, which can be specified inline or in another part of the file.</p>\n<pre><code>ad.onAdFail(function(){\n    trace(&quot;ad failed&quot;);\n});\n</code></pre><p><code>onAdClose</code> is triggered when an ad is closed. For the moment it applies only to interstitial ads. Banner and Video ads do not trigger this event. The function takes another function as parameter.</p>\n<pre><code>ad.onAdClose(function() {\n    trace(&quot;ad closed&quot;);\n});\n</code></pre><p><code>onAdEmpty</code> is triggered when an ad is loaded OK but the server returns an empty JSON. This might be because the placement is invalid or because there is no campaign data associated with the placement. The function takes another function as parameter.</p>\n<pre><code>ad.onAdEmpty(function(){\n    trace(&quot;ad empty&quot;);\n});\n</code></pre>"
        },
        {
            "name": "Testing  Placements",
            "text": "<p>Our SDK has a test mode flag that if set, causes your placements to display our demo ads. This way you can easily test the production and the development version of your app separately. To enable test mode call the following method:</p>\n<pre><code>SuperAwesome.sharedInstance().enableTestMode();\n</code></pre><p>We also provide some demo placements that can be used for testing. These placements have a 100% fill rate.</p>\n<table>\n<thead>\n<tr>\n<th>Placement ID</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5687</td>\n<td>320x50 banner</td>\n</tr>\n<tr>\n<td>5692</td>\n<td>320x480 interstitial</td>\n</tr>\n<tr>\n<td>5740</td>\n<td>video</td>\n</tr>\n</tbody>\n</table>\n"
        },
        {
            "name": "Debug vs. Production",
            "text": "<h3 id=\"debug\">Debug</h3>\n<p>At this moment your <code>/project_root</code> folder should contain at least the following files:</p>\n<ul>\n<li><code>MyFlashProject.fla</code></li>\n<li><code>Main.as</code></li>\n<li><code>MyFlashProject.swf</code></li>\n<li><code>SuperAwesome.swc</code></li>\n<li><code>VideoPlayer.swf</code></li>\n</ul>\n<p>To test the ads, simply press on the Control -&gt; Test menu in Flash CC.</p>\n<h3 id=\"deployment\">Deployment</h3>\n<p>There are no special requirements with AwesomeAds SDK when deploying a .swf project on a webserver. You simply package your project as a .swf file (such as <code>MyFlashProject.swf</code>) and place it in the desired server folder in order to be served. No need to copy the <code>SuperAwesome.swc</code> file, it will come bundled with the .swf file.</p>\n<p>However, at this moment, you will need to copy the <code>VideoPlayer.swf</code> file in the server folder.</p>\n"
        },
        {
            "name": "Technical Support",
            "text": "<p>If you have any questions or you need technical support, please, do not hesitate to contact us at <a href=\"mailto:devsupport@superawesome.tv\">devsupport@superawesome.tv</a>. We will make every attempt to answer your inquiry as quickly as possible.</p>\n"
        },
        {
            "name": "License",
            "text": "<p>See the LICENSE.txt file for more information.</p>\n"
        }
    ]
}