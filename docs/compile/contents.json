{
    "name": "Adobe Flash SDK",
    "text": "<p>The SuperAwesome Flash SDK (Software Development Kit) lets you to easily add COPPA-compliant pre-roll and display advertisements to your Flash apps.</p>\n<p>This full project source is hosted on GitHub: <a href=\"https://github.com/SuperAwesomeLTD/sa-flash-sdk/tree/v3_beta\">https://github.com/SuperAwesomeLTD/sa-flash-sdk/tree/v3_beta</a></p>\n",
    "sections": [
        {
            "name": "Getting Started",
            "sections": [
                {
                    "name": "Registering Your App on the Dashboard",
                    "text": "<p>If you haven&#39;t registered your app on the SuperAwesome Dashboard yet, you can do that by going to <a href=\"http://dashboard.superawesome.tv\">http://dashboard.superawesome.tv</a> and creating a new app.</p>\n<p><img src=\"img/dashboard.png\" alt=\"\" title=\"Registering an app on the dashboard\"></p>\n<p>Once your app is registered, you can create placements for it and use the documentation provided below to integrate these placements into your Flash application.</p>\n"
                },
                {
                    "name": "Integrating the SDK",
                    "text": "<h3 id=\"download-the-necessary-files\">Download the necessary files</h3>\n<p>The new Flash SDK (v3 Beta) is compiled into a .swc file that you can download from here:</p>\n<ul>\n<li><a href=\"https://github.com/SuperAwesomeLTD/sa-flash-sdk/blob/v3_beta/bin/SuperAwesome_Flash_v3Beta.swc?raw=true\">SuperAwesome_Flash_v3Beta.swc</a>.</li>\n</ul>\n<p>This will allow you to add Banner, Interstitial and Video Ads to your project.</p>\n<p>Once you&#39;ve downloaded the file, you need to add it to your project.</p>\n<h3 id=\"setup-the-adobe-flash-cc-environment\">Setup the Adobe Flash CC Environment</h3>\n<p>Create a new Action Script 3.0 project in Adobe Flash CC (or use your existing one). This can be located anywhere on your hard drive, such as:</p>\n<ul>\n<li>C:/Workspace/MyFlashProject/</li>\n<li>/Users/myuser/Workspace/MyFlashProject/</li>\n</ul>\n<p>We&#39;ll refer to this location from now on simply as <code>/project_root</code>. There should be two important files in this folder:</p>\n<ul>\n<li><code>MyFlashProject.fla</code> - a file created by the Flash CC Environment</li>\n<li><code>Main.as</code> - or a similary named file, that acts as the main class of the Flash application.</li>\n</ul>\n<p><img src=\"img/flash_main.png\" alt=\"\" title=\"The link between .fla file and .as main class\"></p>\n<h3 id=\"adding-the-sdk\">Adding the SDK</h3>\n<p>To add the SDK to the project, simply copy the file you just downloaded, <code>SuperAwesome_Flash_v3Beta.swc</code>, into <code>/project_root</code>. \nThen you&#39;ll need to setup library paths, as follows:</p>\n<p>Go to the File -&gt; Publish Settings menu. A pop-up will appear with different settings. Press on the <code>Action Script 3 Settings</code> button.</p>\n<p><img src=\"img/flash_settings_1.png\" alt=\"\" title=\"Press on the Action Script 3 Settings button\"></p>\n<p>There, in the <code>Library path</code> tab, add the relative or absolute path to where you have saved the two files (in this case, the <code>/project_root</code> folder). In this way, your whole project will have access to the SDK.</p>\n<p><img src=\"img/flash_settings_2.png\" alt=\"\" title=\"Setup the path to the library\"></p>\n<p>Press OK and then make sure that in the <code>Publish Settings</code> menu the <code>Local playback security</code> option is set to <code>Access network only</code>.</p>\n<p><img src=\"img/flash_settings_3.png\" alt=\"\" title=\"Set Local playback security to Access network only\"></p>\n"
                }
            ]
        },
        {
            "name": "Initial Setup",
            "text": "<p>To begin using the SDK, you need to change some parts of your <code>Main.as</code> file, in order to import the tv.superawesome. package and setup some global variables:</p>\n<pre><code>package  {\n    // imports MovieClip (standard Flash package)\n    import flash.display.MovieClip;\n\n    // import all classes from the SuperAwesome package\n    import tv.superawesome.*;\n\n    // main class - always extends from MovieClip\n    public class Main extends MovieClip {\n\n\n        public function Main() {\n            // Configures SuperAwesome SDK to production mode\n            SuperAwesome.getInstance().setConfigurationProduction();\n\n            // enables or disabled test mode\n            SuperAwesome.getInstance().enableTestMode();\n        }\n    }\n\n}\n</code></pre><p>The SuperAwesome SDK can be setup in two ways: Production and Staging, by using:</p>\n<pre><code>SuperAwesome.getInstance().setConfigurationProduction();\nSuperAwesome.getInstance().setConfigurationStaging();\n</code></pre><p>And you can also enable or disable test mode globally, by using:</p>\n<pre><code>SuperAwesome.getInstance().enableTestMode();\nSuperAwesome.getInstance().disableTestMode();\n</code></pre><p>By default, the environment is set to Production Mode and Test Mode disabled.</p>\n"
        },
        {
            "name": "Loading and displaying Ads",
            "sections": [
                {
                    "name": "Banner Ads",
                    "text": "<p>Once you&#39;re done with the setup, you can start loading and displaying ads, which is a two-step process:</p>\n<p>First you&#39;ll need load the ads, by specifying the placement you want ad data loaded.</p>\n<p>In your main class or init function, add the following lines of code:</p>\n<pre><code>\n    SALoader.getInstance().delegate = this;\n    SALoader.getInstance().loadAd(5687);\n</code></pre><p>This will notify the SDK to begin loading. However, in order to get the ad data once it&#39;s been loaded, you&#39;ll need to change your class definition to implement the <code>SALoaderProtocol</code>.</p>\n<pre><code>\npublic class Main extends MovieClip implements SALoaderProtocol {\n.....\n}\n</code></pre><p>The last thing to do is have your Main class implement the two functions required by SALoaderProtocol:</p>\n<pre><code>public function didLoadAd(ad: SAAd): void {\n    var banner: SABannerAd = new SABannerAd(new Rectangle(0, 0, 320, 50));\n    banner.setAd(ad);\n    addChild(banner);\n\n    banner.play();\n}\n\npublic function didFailToLoadAdForPlacementId(placementId: int): void {\n    // handle error here\n}\n</code></pre><p>Notice that in our <code>didLoadAd()</code> implementation we also created a new SABannerAd object, by calling its constructor, which takes only one parameter, the Rectangle the banner ad will show on.</p>\n<p>Then we set the banner&#39;s internal ad object with the one returned by the function implementation, and added the banner as a subchild of the scene.</p>\n<p>The <code>play()</code> function is the one that actually displays the ad. You don&#39;t need to call <code>play()</code> just now, you may well call it at the press of a button or later in the program&#39;s execution. </p>\n"
                },
                {
                    "name": "Interstitial Ads",
                    "text": "<p>Creating interstitial ads is similar.</p>\n<p>Your <code>Main</code> class will still need to implement the SALoaderProtocol, and in the class constructor or in another init function you will have to call:</p>\n<pre><code>SALoader.getInstance().loadAd(5692);\n</code></pre><p>Then creating an interstitial once it&#39;s loaded is a simple as having the specific <code>didLoadAd()</code> implementation:</p>\n<pre><code>\n    public function didLoadAd(ad: SAAd): void {\n    var interstitial:SAInterstitialAd = new SAInterstitialAd();\n    interstitial.setAd(ad);\n    addChild(interstitial);\n\n    interstitial.play();\n}\n</code></pre><p>Notice the SAInterstitialAd constructor takes no parameters.</p>\n"
                },
                {
                    "name": "Video Ads",
                    "text": "<p>Finally, creating video ads is similar:</p>\n<pre><code>\npublic function didLoadAd(ad: SAAd): void {\n    var video:SAVideoAd = new SAVideoAd(new Rectangle(0, 0, 640, 480));\n    video.setAd(ad);\n    addChild(video);\n\n    video.play();\n}\n</code></pre>"
                }
            ]
        },
        {
            "name": "Ad Lifecycle Events",
            "sections": [
                {
                    "name": "Common Events",
                    "text": "<p>Using the same delegate pattern all ads can serve additional events than can be caught and acted upon.</p>\n<p>To do this, your <code>Main</code> class must also implement the <code>SAAdProtocol</code> interface:</p>\n<pre><code>public class Main extends MovieClip implements SALoaderProtocol, SAAdProtocol {\n    ...\n}\n</code></pre><p>Then, of course, you need to implement all the functions related to this interface:</p>\n<pre><code>\n// this function will be called when a certain Ad has been shown on the screen\npublic function adWasShown(placementId: int): void {\n\n}\n\n// this function will be called when a certain Ad has, for some reason,\n// failed to show\npublic function adFailedToShow(placementId: int): void {\n\n}\n\n// this function will be called when an Interstitial or Fullscreen Video Ad\n// has been close\npublic function adWasClosed(placementId: int): void {\n\n}\n\n// this function will be called when a user clicks or taps on an Ad and \n// follows the Ads associated URL\npublic function adFollowedURL(placementId: int): void {\n\n}\n</code></pre><p>Finally, to complete the code, all ads must assign their <code>delegate</code> object to <code>Main</code>. This means that when an ad launches an adWasShown or adWasClosed event, Main will respond with the functions implemented above.</p>\n<pre><code>var bannerad: SABannerAd = new SABannerAD(new Rectangle(0, 0, 320, 50), 5687);\nbannerad.delegate = this; // where this is Main\n</code></pre>"
                },
                {
                    "name": "Video Events",
                    "text": "<p>Additionally, if your <code>Main</code> class implements functions from the <code>SAVideoProtocol</code>, you can catch events like video start or end.</p>\n<p>As usual, you need to change your <code>Main</code> class:</p>\n<pre><code>public class Main extends MovieClip implements SALoaderProtocol, SAViewProtocol, SAVideoAdProtocol {\n\n    // triggered when a video has started playing\n    public function videoStarted(placementId: int): void {\n\n    }\n\n    // triggered when a video has played 1/4 of its length\n    public function videoReachedFirstQuartile(placementId:int): void {\n\n    }\n\n    // triggered when a video has played 1/2 of its length\n    public function videoReachedMidpoint(placementId:int): void {\n\n    }\n\n    // triggered when a video has played 3/4 of its length\n    public function videoReachedThirdQuartile(placementId: int): void {\n\n    }\n\n    // triggered when a video has ended playing\n    public function videoEnded(placementId:int): void {\n\n    }\n}\n</code></pre><p>And just as before, any Video Ads in your app must set their <code>videoDelegate</code> object to <code>Main</code>, as class that implements the SAVideoAdProtocol interface.</p>\n<pre><code>var videoAd: SAVideoAd = new SAVideoAd(new Rectangle(0, 0, 480, 320), 5740);\nvideoAd.videoDelegate = this; // where this is Main\nvideoAd.playInstant();\naddChild(videoAd);\n</code></pre>"
                }
            ]
        },
        {
            "name": "Testing  Placements",
            "text": "<p>Our SDK has a test mode flag that if set, causes your placements to display our demo ads. This way you can easily test the production and the development version of your app separately. To enable test mode call the following method:</p>\n<pre><code>SuperAwesome.sharedInstance().enableTestMode();\n</code></pre><p>We also provide some demo placements that can be used for testing. These placements have a 100% fill rate.</p>\n<table>\n<thead>\n<tr>\n<th>Placement ID</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5687</td>\n<td>320x50 banner</td>\n</tr>\n<tr>\n<td>5692</td>\n<td>320x480 interstitial</td>\n</tr>\n<tr>\n<td>5740</td>\n<td>video</td>\n</tr>\n</tbody>\n</table>\n"
        },
        {
            "name": "Debug vs. Production",
            "text": "<h3 id=\"debug\">Debug</h3>\n<p>At this moment your <code>/project_root</code> folder should contain at least the following files:</p>\n<ul>\n<li><code>MyFlashProject.fla</code></li>\n<li><code>Main.as</code></li>\n<li><code>MyFlashProject.swf</code></li>\n<li><code>SuperAwesome_Flash_v3Beta.swc</code></li>\n</ul>\n<p>To test the ads, simply press on the Control -&gt; Test menu in Flash CC.</p>\n<h3 id=\"deployment\">Deployment</h3>\n<p>There are no special requirements with AwesomeAds SDK when deploying a .swf project on a webserver. You simply package your project as a .swf file (such as <code>MyFlashProject.swf</code>) and place it in the desired server folder in order to be served. No need to copy the <code>SuperAwesome.swc</code> file, it will come bundled with the .swf file.</p>\n"
        },
        {
            "name": "Technical Support",
            "text": "<p>If you have any questions or you need technical support, please, do not hesitate to contact us at <a href=\"mailto:devsupport@superawesome.tv\">devsupport@superawesome.tv</a>. We will make every attempt to answer your inquiry as quickly as possible.</p>\n"
        },
        {
            "name": "License",
            "text": "<p>See the LICENSE.txt file for more information.</p>\n"
        }
    ]
}